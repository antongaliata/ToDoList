[{"C:\\Users\\Anton\\Desktop\\Todolist\\src\\index.tsx":"1","C:\\Users\\Anton\\Desktop\\Todolist\\src\\serviceWorker.ts":"2","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\index.tsx":"3","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\serviceWorker.ts":"4","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\reducer\\store.ts":"5","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\reducer\\tasks-reducer.ts":"6","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\reducer\\app-reducer.ts":"7","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\reducer\\todolists-reducer.ts":"8","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\reducer\\auth-reducer.ts":"9","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\requests\\apiRequests.ts":"10","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\utils\\error-utils.ts":"11","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\App.tsx":"12","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\login.tsx":"13","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\Snackbar.tsx":"14","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\AppWithRedux.tsx":"15","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\Todolist.tsx":"16","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\AddItemForm.tsx":"17","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\EdiTableTitle.tsx":"18"},{"size":621,"mtime":1608732068882,"results":"19","hashOfConfig":"20"},{"size":5295,"mtime":1605015954471,"results":"21","hashOfConfig":"20"},{"size":521,"mtime":1626870049353,"results":"22","hashOfConfig":"23"},{"size":5295,"mtime":1620678475346,"results":"24","hashOfConfig":"23"},{"size":1111,"mtime":1621264188711,"results":"25","hashOfConfig":"23"},{"size":7686,"mtime":1626868001446,"results":"26","hashOfConfig":"23"},{"size":2490,"mtime":1620842336081,"results":"27","hashOfConfig":"23"},{"size":6562,"mtime":1626868001521,"results":"28","hashOfConfig":"23"},{"size":2224,"mtime":1620905097476,"results":"29","hashOfConfig":"23"},{"size":2590,"mtime":1626868001435,"results":"30","hashOfConfig":"23"},{"size":770,"mtime":1620905097517,"results":"31","hashOfConfig":"23"},{"size":2344,"mtime":1626868001403,"results":"32","hashOfConfig":"23"},{"size":4247,"mtime":1626872915430,"results":"33","hashOfConfig":"23"},{"size":1039,"mtime":1626868001484,"results":"34","hashOfConfig":"23"},{"size":4199,"mtime":1626868001386,"results":"35","hashOfConfig":"23"},{"size":5118,"mtime":1626868001494,"results":"36","hashOfConfig":"23"},{"size":1504,"mtime":1626950454201,"results":"37","hashOfConfig":"23"},{"size":1435,"mtime":1626865756539,"results":"38","hashOfConfig":"23"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"6lhkan",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"q9ni2z",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\Anton\\Desktop\\Todolist\\src\\index.tsx",[],["81","82"],"C:\\Users\\Anton\\Desktop\\Todolist\\src\\serviceWorker.ts",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\index.tsx",[],["83","84"],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\serviceWorker.ts",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\reducer\\store.ts",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\reducer\\tasks-reducer.ts",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\reducer\\app-reducer.ts",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\reducer\\todolists-reducer.ts",["85","86"],"import {TodoListType, FilterValuesType} from '../components/AppWithRedux';\r\nimport {ResponseTodolistType, todoListsAPI} from \"../requests/apiRequests\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC, StatusApiRequestType} from \"./app-reducer\";\r\nimport {handlerServerError, handlerServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string | any\r\n}\r\n\r\nexport type ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodoListActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    todoList: ResponseTodolistType\r\n}\r\n\r\n\r\nexport type SetTodoListsActionType = {\r\n    type: 'SET-TODO-LISTS'\r\n    todoLists: Array<ResponseTodolistType>\r\n}\r\n\r\ntype setTodoListEntityStatusType = {\r\n    type: 'ENTITY-STATUS'\r\n    entityStatus: StatusApiRequestType\r\n    todolistId: string\r\n}\r\n\r\ntype ActionType =\r\n    RemoveTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListActionType\r\n    | AddTodoListActionType\r\n    | SetTodoListsActionType\r\n    | setTodoListEntityStatusType\r\n\r\n\r\nconst initialState: Array<TodoListType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            let todoLists = state.filter((tl) => tl.id !== action.id);\r\n            for (let i = 0; i < state.length; i++) {\r\n                if (state[i].id === action.id) {\r\n                    delete state[i]\r\n                }\r\n            }\r\n            return [...todoLists]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let todoList = state.find((t) => t.id === action.id);\r\n            if (todoList) {\r\n                todoList.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER' : {\r\n            state.find((tl) => {\r\n                if (tl.id === action.id) {\r\n                    tl.filter = action.filter;\r\n                }\r\n            })\r\n            return [...state]\r\n        }\r\n        case 'ADD-TODOLIST' : {\r\n            const newTodoList: TodoListType = {...action.todoList, filter: \"all\", entityStatus: \"idle\"}\r\n            return [newTodoList, ...state ]\r\n        }\r\n\r\n        case 'SET-TODO-LISTS' : {\r\n            return action.todoLists.map((tl) => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n\r\n        case 'ENTITY-STATUS' : {\r\n            state.find((tl) => {\r\n                if (tl.id === action.todolistId) {\r\n                    tl.entityStatus = action.entityStatus\r\n                }\r\n            })\r\n            return [...state]\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setTodoListEntityStatusAC = (entityStatus: StatusApiRequestType, todolistId: string): setTodoListEntityStatusType => {\r\n    return {type: 'ENTITY-STATUS', todolistId, entityStatus}\r\n}\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\n\r\nexport const ChangeTodoListTitleAC = (todolistId: string, newTodolistTitle: string): ChangeTodoListTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE' as const,\r\n        id: todolistId,\r\n        title: newTodolistTitle\r\n    }\r\n}\r\n\r\nexport const ChangeTodoListFilterAC = (todolistId: string, newFilter: FilterValuesType): ChangeTodoListActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER' as const,\r\n        id: todolistId,\r\n        filter: newFilter\r\n    }\r\n}\r\n\r\nexport const AddTodoListAC = (todoList: ResponseTodolistType): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', todoList: todoList}\r\n}\r\n\r\nexport const setTodoListsAC = (todoLists: Array<ResponseTodolistType>): SetTodoListsActionType => {\r\n    return {type: 'SET-TODO-LISTS', todoLists}\r\n}\r\n\r\n\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListsAPI.GetTodolist()\r\n            .then(data => {\r\n                dispatch(setTodoListsAC(data.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchCreateTodoList = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListsAPI.CreateTodolist(title)\r\n            .then(res => {\r\n                if (!res.data.messages[0]) {\r\n                    dispatch(AddTodoListAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handlerServerError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchDeleteTodolist = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setTodoListEntityStatusAC('loading', todolistId))\r\n        todoListsAPI.DeleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (!res.data.messages[0]) {\r\n                    dispatch(RemoveTodolistAC(todolistId))\r\n                    dispatch(setTodoListEntityStatusAC('idle', todolistId))\r\n                } else {\r\n                    handlerServerError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchUpdateTodolist = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setTodoListEntityStatusAC('loading', todolistId))\r\n        todoListsAPI.UpdateTodolist(todolistId, title)\r\n            .then((res) => {\r\n                if (!res.data.messages[0]) {\r\n                    dispatch(ChangeTodoListTitleAC(todolistId, title))\r\n                    dispatch(setTodoListEntityStatusAC('idle', todolistId))\r\n                } else {\r\n                    handlerServerError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\reducer\\auth-reducer.ts",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\requests\\apiRequests.ts",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\state\\utils\\error-utils.ts",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\App.tsx",["87"],"import {ErrorSnackbar} from \"./Snackbar\";\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"./login\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/reducer/store\";\r\nimport {fetchTodoListsTC, StatusApiRequestType} from \"../state/reducer/app-reducer\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {logoutTC} from \"../state/reducer/auth-reducer\";\r\n\r\nexport const App = () => {\r\n    const appStatus = useSelector<AppRootStateType, StatusApiRequestType>(state => state.app.status)\r\n    const initializeApp = useSelector<AppRootStateType, boolean>(state => state.app.initializeApp)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    const logout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!initializeApp) {\r\n        return <div style={{\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            alignItems: \"center\",\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n        }}>\r\n            <CircularProgress size={120}/></div>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n            <Toolbar style={{display: 'flex', justifyContent: 'space-between', background: '#4B4453'}}>\r\n                <Typography variant=\"h4\">Todolist</Typography>\r\n                {isLoggedIn ? <Button color=\"inherit\" onClick={logout}>sign out</Button> : null}\r\n            </Toolbar>\r\n        </AppBar>\r\n        <div style={{height: '4px', width: '100%'}}>\r\n            {appStatus === 'loading' && <LinearProgress style={{color: '#B39CD0'}}/>}\r\n        </div>\r\n        <ErrorSnackbar/>\r\n        <Switch>\r\n            <Route exact path={'/'} render={() => <AppWithRedux/>}/>\r\n            <Route exact path={'/login'} render={() => <Login isLoggedIn={isLoggedIn}/>}/>\r\n            <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n            <Redirect from={'*'} to={'/404'}/>\r\n        </Switch>\r\n    </div>\r\n}","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\login.tsx",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\Snackbar.tsx",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\AppWithRedux.tsx",["88","89","90","91","92","93","94","95","96"],"import React, {useCallback, useEffect} from 'react';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {\r\n    ChangeTodoListFilterAC, fetchCreateTodoList, fetchDeleteTodolist, fetchTodoListsTC, fetchUpdateTodolist\r\n} from \"../state/reducer/todolists-reducer\";\r\nimport {\r\n    fetchCreateTask, fetchDeleteTask, fetchUpdateTask,\r\n    taskStatusAC\r\n} from \"../state/reducer/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/reducer/store\";\r\nimport {StatusApiRequestType} from \"../state/reducer/app-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: StatusApiRequestType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n\r\n    const removeTask = useCallback((id: string, todoListId: string) => {\r\n        const thunk = fetchDeleteTask(todoListId, id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        const thunk = fetchCreateTask(todoListId, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todoListId: string) => {\r\n        const action = taskStatusAC(id, isDone, todoListId)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const changeHandlerTaskTitle = useCallback((newTitle: string, idTodoList: string, idTask: string) => {\r\n        const thunk = fetchUpdateTask(idTodoList, idTask, newTitle)\r\n        dispatch(thunk);\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, id: string) => {\r\n        const action = ChangeTodoListFilterAC(id, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodoList = useCallback((id: string) => {\r\n        const actionThunk = fetchDeleteTodolist(id)\r\n        dispatch(actionThunk)\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        const actionThunk = fetchCreateTodoList(title)\r\n        dispatch(actionThunk)\r\n    }, [])\r\n\r\n    const changeHandlerTodoListTitle = useCallback((newTitle: string, id: string) => {\r\n        const actionThunk = fetchUpdateTodolist(id, newTitle)\r\n        dispatch(actionThunk)\r\n    }, [])\r\n\r\n    if(!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <div style={{paddingLeft: '1%'}}>\r\n        <h3>Add Todolist</h3>\r\n        <AddItemForm addItem={addTodoList} entityStatus={false}/>\r\n        <Grid container={true} style={{padding: '20px'}}>\r\n            {todoLists.map((tl) => {\r\n                const tasksForTodolist = tasks[tl.id];\r\n                return <Grid item key={tl.id}>\r\n                        <Todolist\r\n                            changeHandlerTaskTitle={changeHandlerTaskTitle}\r\n                            changeHandlerTitle={changeHandlerTodoListTitle}\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksForTodolist}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={tl.filter}\r\n                            deleteTodoList={removeTodoList}\r\n                            entityStatus={tl.entityStatus}/>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default AppWithRedux;\r\n","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\Todolist.tsx",["97","98"],"import React, {ChangeEvent, useCallback, useEffect} from 'react';\r\nimport {FilterValuesType} from './AppWithRedux';\r\nimport '../style/App.css';\r\nimport '../style/todolist.css'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EdiTableTitle} from \"./EdiTableTitle\";\r\nimport {Button, ButtonGroup, Checkbox, CircularProgress, IconButton, Paper} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {fetchTaskTC} from \"../state/reducer/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {StatusApiRequestType} from \"../state/reducer/app-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    entityStatus: StatusApiRequestType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, id: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    filter: string\r\n    id: string\r\n    deleteTodoList: (id: string) => void\r\n    changeHandlerTitle: (newTitle: string, id: string) => void\r\n    changeHandlerTaskTitle: (newTitle: string, id: string, idTask: string) => void\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [])\r\n    const buttonDelete = () => props.deleteTodoList(props.id);\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n    const onChangeTitle = (newTitle: string ) => props.changeHandlerTitle(newTitle, props.id);\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone);\r\n    }\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTaskTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    return <Paper elevation={5} className={'paper-todolist'}>\r\n        {props.entityStatus === 'loading' &&\r\n        <div className={'todolist-at-event'}>\r\n            <CircularProgress size={70}\r\n                              style={{position: 'absolute', top: '35%', left: '35%'}}/>\r\n        </div>}\r\n        <div className={'header_todolist'}>\r\n            <EdiTableTitle title={props.title} onChange={onChangeTitle}/>\r\n            <button className={'buttonDelete'} onClick={buttonDelete}\r\n                    disabled={props.entityStatus === 'loading'}>&#10006;</button>\r\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus === 'loading'}/>\r\n        </div>\r\n            <ul className={'wrapperTasks'}>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n                        const onChangeTaskTitle = (newTitle: string) => {\r\n                            return props.changeHandlerTaskTitle(newTitle, props.id, t.id);\r\n                        }\r\n\r\n                        const ChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n                        }\r\n\r\n                        const onClickHandler = () => props.removeTask(t.id, props.id);\r\n                        return <div key={t.id}>\r\n                            <Checkbox checked={t.isDone} onChange={ChangeHandler} color=\"primary\" size=\"small\"/>\r\n                            <span className={t.isDone ? \"task_is_done\" : \"\"}>\r\n                            <EdiTableTitle title={t.title} onChange={onChangeTaskTitle}/>\r\n                        </span>\r\n                            <IconButton onClick={onClickHandler} size=\"small\"\r\n                                        disabled={props.entityStatus === 'loading'}> <Delete/></IconButton>\r\n                        </div>\r\n                    })\r\n                }\r\n            </ul>\r\n        <div className={'wrapper-button-group'}>\r\n            <div className={'button-group'}>\r\n                <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\"\r\n                             size=\"small\">\r\n                    <Button color={props.filter === \"all\" ? \"primary\" : \"inherit\"} onClick={onAllClickHandler}\r\n                    >All</Button>\r\n\r\n                    <Button color={props.filter === \"active\" ? \"primary\" : \"inherit\"} onClick={onActiveClickHandler}\r\n                    >Active\r\n                    </Button>\r\n\r\n                    <Button color={props.filter === \"completed\" ? \"primary\" : \"inherit\"}\r\n                            onClick={onCompletedClickHandler}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\AddItemForm.tsx",[],"C:\\Users\\Anton\\Desktop\\git_hub\\ToDoList\\src\\components\\EdiTableTitle.tsx",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"99","replacedBy":"103"},{"ruleId":"101","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":72,"column":29,"nodeType":"107","messageId":"108","endLine":72,"endColumn":31},{"ruleId":"105","severity":1,"message":"106","line":89,"column":29,"nodeType":"107","messageId":"108","endLine":89,"endColumn":31},{"ruleId":"109","severity":1,"message":"110","line":26,"column":8,"nodeType":"111","endLine":26,"endColumn":10,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":45,"column":8,"nodeType":"111","endLine":45,"endColumn":10,"suggestions":"114"},{"ruleId":"109","severity":1,"message":"115","line":51,"column":8,"nodeType":"111","endLine":51,"endColumn":10,"suggestions":"116"},{"ruleId":"109","severity":1,"message":"115","line":56,"column":8,"nodeType":"111","endLine":56,"endColumn":10,"suggestions":"117"},{"ruleId":"109","severity":1,"message":"115","line":61,"column":8,"nodeType":"111","endLine":61,"endColumn":10,"suggestions":"118"},{"ruleId":"109","severity":1,"message":"115","line":66,"column":8,"nodeType":"111","endLine":66,"endColumn":10,"suggestions":"119"},{"ruleId":"109","severity":1,"message":"115","line":71,"column":8,"nodeType":"111","endLine":71,"endColumn":10,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"115","line":76,"column":8,"nodeType":"111","endLine":76,"endColumn":10,"suggestions":"121"},{"ruleId":"109","severity":1,"message":"115","line":81,"column":8,"nodeType":"111","endLine":81,"endColumn":10,"suggestions":"122"},{"ruleId":"109","severity":1,"message":"115","line":86,"column":8,"nodeType":"111","endLine":86,"endColumn":10,"suggestions":"123"},{"ruleId":"109","severity":1,"message":"124","line":40,"column":8,"nodeType":"111","endLine":40,"endColumn":10,"suggestions":"125"},{"ruleId":"109","severity":1,"message":"126","line":60,"column":8,"nodeType":"111","endLine":60,"endColumn":10,"suggestions":"127"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],["128"],["129"],"array-callback-return","Array.prototype.find() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["130"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["131"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["132"],["133"],["134"],["135"],["136"],["137"],["138"],["139"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["140"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["141"],"no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"142","fix":"146"},{"desc":"142","fix":"147"},{"desc":"142","fix":"148"},{"desc":"142","fix":"149"},{"desc":"142","fix":"150"},{"desc":"142","fix":"151"},{"desc":"142","fix":"152"},{"desc":"142","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [dispatch]",{"range":"158","text":"159"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"160","text":"161"},{"range":"162","text":"159"},{"range":"163","text":"159"},{"range":"164","text":"159"},{"range":"165","text":"159"},{"range":"166","text":"159"},{"range":"167","text":"159"},{"range":"168","text":"159"},{"range":"169","text":"159"},"Update the dependencies array to be: [props]",{"range":"170","text":"171"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"172","text":"173"},[1042,1044],"[dispatch]",[1467,1469],"[dispatch, isLoggedIn]",[1637,1639],[1808,1810],[2002,2004],[2219,2221],[2398,2400],[2554,2556],[2713,2715],[2909,2911],[1454,1456],"[props]",[2262,2264],"[dispatch, props.id]"]