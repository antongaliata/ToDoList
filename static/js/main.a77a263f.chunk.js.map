{"version":3,"sources":["serviceWorker.ts","state/requests/apiRequests.ts","state/utils/error-utils.ts","state/reducer/auth-reducer.ts","state/reducer/app-reducer.ts","state/reducer/todolists-reducer.ts","state/reducer/tasks-reducer.ts","state/reducer/store.ts","components/Snackbar.tsx","components/login.tsx","components/AddItemForm.tsx","components/EdiTableTitle.tsx","components/Todolist.tsx","components/AppWithRedux.tsx","components/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","todolistId","delete","put","taskAPI","taskId","authAPI","data","handlerServerError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handlerServerNetworkError","error","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","initializeApp","initializeAppAC","setTodoListEntityStatusAC","entityStatus","rootReducer","combineReducers","tasks","state","action","copyState","todolistTasks","filter","t","id","NewTask","titleTask","isDone","task","find","taskStatus","todoLists","todoList","taskTitle","forEach","tl","todoListId","i","newTodoList","map","app","auth","store","createStore","applyMiddleware","thunk","Alert","props","elevation","variant","ErrorSnackbar","useDispatch","errorMessage","useSelector","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","then","rec","resultCode","catch","resetForm","to","className","Paper","handleSubmit","FormControl","style","padding","width","textAlign","FormLabel","FormGroup","TextField","label","margin","getFieldProps","height","color","touched","FormControlLabel","control","Checkbox","onChange","handleChange","checked","name","Button","AddItemForm","React","memo","useState","setTitle","setError","addItem","trim","size","e","currentTarget","onKeyPress","key","helperText","disabled","IconButton","onClick","AddBox","EdiTableTitle","editMode","setEditMode","switchOfActiveEditMode","autoFocus","onKeyDown","onBlur","onDoubleClick","Todolist","addTask","useCallback","tasksForTodolist","useEffect","res","items","CircularProgress","position","top","left","newTitle","changeHandlerTitle","deleteTodoList","changeTaskStatus","changeHandlerTaskTitle","removeTask","Delete","ButtonGroup","aria-label","changeFilter","AppWithRedux","removeTaskAC","addTaskAC","item","fetchCreateTask","changeStatus","idTodoList","idTask","console","log","taskTitleAC","removeTodoList","actionThunk","RemoveTodolistAC","addTodoList","fetchCreateTodoList","changeHandlerTodoListTitle","newTodolistTitle","ChangeTodoListTitleAC","paddingLeft","Grid","container","App","appStatus","AppBar","Toolbar","display","justifyContent","background","Typography","LinearProgress","exact","path","render","from","alignItems","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCRAC,E,OAAWC,EAAMC,OAAN,aACbC,QAAS,iDARI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CAyBNC,EACI,kBAAMN,EAASO,IAAiC,eADpDD,EAGO,SAACE,GAAD,OAAmBR,EAASS,KAAkD,aAAc,CAACD,MAAOA,KAH3GF,EAKO,SAACI,GAAD,OAAwBV,EAASW,OAAT,qBAA+CD,KAL9EJ,EAOO,SAACI,EAAoBF,GAArB,OAAuCR,EAASY,IAAT,qBAA4CF,GAAc,CAACF,MAAOA,KAwBhHK,EAEA,SAACH,GAAD,OAAwBV,EAASO,IAAT,sBAAuDG,EAAvD,YAFxBG,EAIG,SAACH,EAAoBF,GAArB,OAAuCR,EAASS,KAAT,sBAAsEC,EAAtE,UAA0F,CAACF,MAAOA,KAJ5IK,EAMG,SAACH,EAAoBI,GAArB,OAAwCd,EAASW,OAAT,sBAAgDD,EAAhD,kBAAoEI,KAN/GD,EAQG,SAACH,EAAoBI,EAAgBN,GAArC,OAAuDR,EAASY,IAAT,sBAA2DF,EAA3D,kBAA+EI,GAAU,CAACN,MAAOA,KAkB3JO,EACH,SAACC,GAAD,OAAyBhB,EAASS,KAAuC,cAAeO,IADrFD,EAED,kBAAMf,EAASO,IAA6B,aAF3CQ,EAGD,kBAAMf,EAASW,OAAwB,gBCtFtCM,EAAqB,SAAIC,EAAwDF,GACtFA,EAAKG,SAAS,GAAGC,OACjBF,EAASG,EAAcL,EAAKG,SAAS,KAErCD,EAASG,EAAc,wBAE3BH,EAASI,EAAe,YAIfC,EAA4B,SAACL,EAAwDM,GAC9FN,EAASG,EAAcG,EAAML,SAAWK,EAAML,SAAW,mBACzDD,EAASI,EAAe,YCZtBG,EAAe,CACjBC,YAAY,GAkBHC,EAAkB,SAACC,GAC5B,MAAO,CAACC,KAAM,yBAA0BD,UCjBtCH,EAAe,CACjBK,OAAQ,UACRN,MAAO,GACPO,eAAe,GA6CNT,EAAiB,SAACQ,GAC3B,MAAO,CAACD,KAAM,qBAAsBC,WAE3BT,EAAgB,SAACG,GAC1B,MAAO,CAACK,KAAM,gBAAiBL,UAGtBQ,EAAkB,SAACD,GAC5B,MAAO,CAACF,KAAM,qBAAsBE,kBCdlCN,EAAoC,GAoD7BQ,EAA4B,SAACC,EAAoCxB,GAC1E,MAAO,CAACmB,KAAM,gBAAiBnB,aAAYwB,iBC5CzCT,EAA+B,G,gBClD/BU,EAAcC,YAAgB,CAChCC,MDoDwB,WAA+E,IAA9EC,EAA6E,uDAArDb,EAAcc,EAAuC,uCACtG,OAAQA,EAAOV,MAEX,IAAK,cAED,IAAMW,EAAS,eAAOF,GAChBG,EAAgBD,EAAUD,EAAO7B,YAEvC,OADA8B,EAAUD,EAAO7B,YAAc+B,EAAcC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAOL,EAAOzB,UAClE0B,EAEX,IAAK,WAED,IAAMA,EAAS,eAAOF,GAChBG,EAAgBD,EAAUD,EAAO7B,YACjCmC,EAAU,CAACD,GAAIL,EAAOzB,OAAQN,MAAO+B,EAAOO,UAAWC,QAAQ,GAErE,OADAP,EAAUD,EAAO7B,YAAjB,CAAgCmC,GAAhC,mBAA4CJ,IACrCD,EAEX,IAAK,cAED,IAAMA,EAAS,eAAOF,GAChBG,EAAgBD,EAAUD,EAAO7B,YACjCsC,EAAOP,EAAcQ,MAAK,SAACN,GAAD,OAAOA,EAAEC,KAAOL,EAAOzB,UAKvD,OAJIkC,IACAA,EAAKD,OAASR,EAAOW,YAEzBV,EAAUD,EAAO7B,YAAjB,YAAmC+B,GAC5BD,EAEX,IAAK,eACD,IAAMA,EAAS,eAAOF,GAChBa,EAAYX,EAAUD,EAAO7B,YAC7B0C,EAAWD,EAAUF,MAAK,SAACN,GAAD,OAAOA,EAAEC,KAAOL,EAAOzB,UAKvD,OAJIsC,IACAA,EAAS5C,MAAQ+B,EAAOc,UACxBb,EAAUD,EAAO7B,YAAjB,YAAmCyC,IAEhCX,EAEX,IAAK,eACD,IAAMA,EAAS,eAAOF,GACtB,OAAO,2BAAIE,GAAX,kBAAuBD,EAAOa,SAASR,GAAK,KAEhD,IAAK,kBACD,IAAMJ,EAAS,eAAOF,GAEtB,cADOE,EAAUD,EAAOK,IACjB,eAAIJ,GAGf,IAAK,iBACD,IAAMA,EAAS,eAAOF,GAItB,OAHAC,EAAOY,UAAUG,SAAQ,SAAAC,GACrBf,EAAUe,EAAGX,IAAM,MAEhBJ,EAGX,IAAK,WACD,IAAMA,EAAS,eAAOF,GAEtB,OADAE,EAAUD,EAAOiB,YAAcjB,EAAOS,KAC/BR,EAEX,QACI,OAAOF,IClHfa,UFyC4B,WAAyF,IAAxFb,EAAuF,uDAA1Db,EAAcc,EAA4C,uCACpH,OAAQA,EAAOV,MACX,IAAK,kBAED,IADA,IAAIsB,EAAYb,EAAMI,QAAO,SAACa,GAAD,OAAQA,EAAGX,KAAOL,EAAOK,MAC7Ca,EAAI,EAAGA,EAAInB,EAAMlB,OAAQqC,IAC1BnB,EAAMmB,GAAGb,KAAOL,EAAOK,WAChBN,EAAMmB,GAGrB,OAAO,YAAIN,GAEf,IAAK,wBACD,IAAIC,EAAWd,EAAMW,MAAK,SAACN,GAAD,OAAOA,EAAEC,KAAOL,EAAOK,MAIjD,OAHIQ,IACAA,EAAS5C,MAAQ+B,EAAO/B,OAErB,YAAI8B,GAEf,IAAK,yBAMD,OALAA,EAAMW,MAAK,SAACM,GACJA,EAAGX,KAAOL,EAAOK,KACjBW,EAAGb,OAASH,EAAOG,WAGpB,YAAIJ,GAEf,IAAK,eACD,IAAMoB,EAAyB,2BAAOnB,EAAOa,UAAd,IAAwBV,OAAQ,MAAOR,aAAc,SACpF,MAAM,CAAEwB,GAAR,mBAAwBpB,IAG5B,IAAK,iBACD,OAAOC,EAAOY,UAAUQ,KAAI,SAACJ,GAAD,mBAAC,eAAYA,GAAb,IAAiBb,OAAQ,MAAOR,aAAc,YAG9E,IAAK,gBAMD,OALAI,EAAMW,MAAK,SAACM,GACJA,EAAGX,KAAOL,EAAO7B,aACjB6C,EAAGrB,aAAeK,EAAOL,iBAG1B,YAAII,GAGf,QACI,OAAOA,IErFfsB,IH2BsB,WAAmF,IAAlFtB,EAAiF,uDAAvDb,EAAcc,EAAyC,uCAExG,OAAQA,EAAOV,MACX,IAAK,qBACD,OAAO,2BAAIS,GAAX,IAAkBR,OAAQS,EAAOT,SAErC,IAAK,gBACD,OAAO,2BAAIQ,GAAX,IAAkBd,MAAOe,EAAOf,QAEpC,IAAK,qBACD,OAAO,2BAAIc,GAAX,IAAkBP,cAAeQ,EAAOR,gBAE5C,QACI,OAAOO,IGvCfuB,KJFuB,WAAoF,IAAnFvB,EAAkF,uDAAxDb,EAAcc,EAA0C,uCAC1G,OAAQA,EAAOV,MACX,IAAK,yBACD,OAAO,2BAAIS,GAAX,IAAkBZ,WAAYa,EAAOX,QAEzC,QACI,OAAOU,MICNwB,EAAQC,YAAY5B,EAAa6B,YAAgBC,MAM9DrE,OAAOkE,MAAQA,E,sBChBf,SAASI,EAAMC,GACX,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAGjD,SAASG,IACZ,IAAMpD,EAAWqD,cACXC,EAAeC,aAA6C,SAAAnC,GAAK,OAAIA,EAAMsB,IAAIpC,SAE/EkD,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJ1D,EAASG,EAAc,QAG3B,OACI,cAACwD,EAAA,EAAD,CAAUC,OAAQN,EAAcO,iBAAkB,IAAMC,QAASN,EAAjE,SACI,cAAC,EAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SACKT,M,+ICLJU,GAAQ,SAACf,GAElB,IAAMjD,EAAWqD,cACXY,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAAc,GAapB,OAZKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAKdI,EAAOH,SAEDG,EAAOH,SAASnE,OAAS,IAChCuE,EAAOJ,SAAW,4BAFlBI,EAAOJ,SAAW,WAKfI,GAEXE,SAAU,SAACH,GNjBI,IAAC1E,EMkBZE,GNlBYF,EMkBK0E,ENjBlB,SAACxE,GACJA,EAASI,EAAe,YACxBP,EAAaC,GACR8E,MAAK,SAAAC,GACGA,EAAI/E,KAAKgF,YAIV/E,EAAmBC,EAAU6E,EAAI/E,MACjCE,EAASI,EAAe,aAJxBJ,EAASS,GAAgB,IACzBT,EAASI,EAAe,kBAM/B2E,OAAM,SAAAzE,GACHD,EAA0BL,EAAUM,SMKxC2D,EAAOe,eAKf,OAAI/B,EAAMzC,WACC,cAAC,IAAD,CAAUyE,GAAI,MAIrB,qBAAKC,UAAW,kBAAhB,SACI,cAACC,EAAA,EAAD,UACI,sBAAMR,SAAUV,EAAOmB,aAAvB,SACI,cAACC,EAAA,EAAD,UACI,eAACF,EAAA,EAAD,CAAOG,MAAO,CAACC,QAAS,OAAOC,MAAM,SAArC,UACI,oBAAIF,MAAO,CAACG,UAAW,UAAvB,mBACA,eAACC,GAAA,EAAD,WACI,2CACA,8DACA,wDAEJ,eAACC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,aACIC,MAAM,QACNnE,GAAG,QACHoE,OAAO,UACH7B,EAAO8B,cAAc,WAE5B,qBAAKT,MAAO,CACTU,OAAQ,OACRC,MAA+B,aAAxBhC,EAAOQ,OAAOL,MAAuB,QAAU,OAFzD,SAGGH,EAAOiC,QAAQ9B,OAASH,EAAOQ,OAAOL,MACtC,8BAAMH,EAAOQ,OAAOL,QACpB,OACJ,cAACwB,GAAA,EAAD,aACIlE,GAAG,WACHf,KAAK,WACLkF,MAAM,WACNC,OAAO,UACH7B,EAAO8B,cAAc,cAE5B,qBAAKT,MAAO,CACTU,OAAQ,OACRC,MAAkC,aAA3BhC,EAAOQ,OAAOJ,SAA0B,QAAU,OAF5D,SAGGJ,EAAOiC,QAAQ7B,UAAYJ,EAAOQ,OAAOJ,SACzC,8BAAMJ,EAAOQ,OAAOJ,WACpB,OACJ,cAAC8B,GAAA,EAAD,CACIN,MAAO,cACPO,QAAS,cAACC,GAAA,EAAD,CAAUC,SAAUrC,EAAOsC,aACjBC,QAASvC,EAAOO,OAAOF,WACvBmC,KAAK,iBAE5B,cAACC,EAAA,EAAD,CAAQ/F,KAAM,SAAUwC,QAAS,YAAa8C,MAAO,UAArD,kC,6CC5FnBU,GAAcC,IAAMC,MAAK,SAAU5D,GAAyB,IAAD,EAE1C6D,mBAAS,IAFiC,oBAE7DxH,EAF6D,KAEtDyH,EAFsD,OAG1CD,mBAAS,IAHiC,oBAG7DxG,EAH6D,KAGtD0G,EAHsD,KAK9DC,EAAU,WACR3H,EAAM4H,OACNjE,EAAMgE,QAAQ3H,EAAM4H,QAEpBF,EAAS,SAEbD,EAAS,KAgBb,OAAO,gCACH,cAACnB,GAAA,EAAD,CACIuB,KAAK,QACLhE,QAAQ,WACR7C,QAASA,EACTI,MAAOpB,EACPgH,SAnBgB,SAACc,GACrBL,EAASK,EAAEC,cAAc3G,OACzBsG,EAAS,KAkBLM,WAhBkB,SAACF,GACT,KAAV9G,GACA0G,EAAS,IAEC,UAAVI,EAAEG,KACFN,KAYApB,MAAM,QACN2B,WAAYlH,EACZmH,SAAUxE,EAAMjC,eAEpB,eAAC0G,GAAA,EAAD,CAAYC,QAASV,EAASQ,SAAUxE,EAAMjC,aAA9C,cAA8D,cAAC4G,GAAA,EAAD,IAA9D,aCxCD,SAASC,GAAc5E,GAAgC,IAAD,EAE3B6D,qBAF2B,oBAEpDgB,EAFoD,KAE1CC,EAF0C,OAGjCjB,mBAAiB,IAHgB,oBAGpDxH,EAHoD,KAG7CyH,EAH6C,OAIjCD,oBAAkB,GAJe,oBAIpDxG,EAJoD,KAI7C0G,EAJ6C,KAUnDgB,EAAyB,WAC3BD,GAAY,GACZ9E,EAAMqD,SAAShH,IAcnB,OAAOwI,EACD,cAAClC,GAAA,EAAD,CAAWuB,KAAK,QACLc,WAAW,EACXC,UAAW,SAACd,GACE,UAAVA,EAAEG,KAAmBS,KAEzB1B,SAjBI,SAACc,GACdA,EAAEC,cAAc3G,MAAMR,OAAS,KAC/B6G,EAASK,EAAEC,cAAc3G,OACzBsG,GAAS,IAETA,GAAS,IAaAmB,OAAQH,EACRtH,MAAOpB,EACP2G,MAAO3F,EAAQ,YAAc,YAExC,sBAAM8H,cA/BW,WACnBrB,EAAS9D,EAAM3D,OACfyI,GAAY,IA6B2B7C,UAAW,QAAhD,SAA0DjC,EAAM3D,Q,wBCX7D+I,GAAWzB,IAAMC,MAAK,SAAU5D,GAGzC,IAAMqF,EAAUC,uBAAY,SAACjJ,GACzB2D,EAAMqF,QAAQhJ,EAAO2D,EAAMvB,MAC5B,IAOC8G,EAAmBvF,EAAM9B,MAER,WAAjB8B,EAAMzB,SACNgH,EAAmBvF,EAAM9B,MAAMK,QAAO,SAAAC,GAAC,OAAKA,EAAEI,WAE7B,cAAjBoB,EAAMzB,SACNgH,EAAmBvF,EAAM9B,MAAMK,QAAO,SAAAC,GAAC,OAAIA,EAAEI,WAEjD,IAAM7B,EAAWqD,cAOjB,OALAoF,qBAAU,WACN,IN6FoBjJ,EM7FduD,GN6FcvD,EM7FMyD,EAAMvB,GN8F7B,SAAC1B,GACJA,EAASe,EAA0B,UAAWvB,IAC9CG,EAAgBH,GACXoF,MAAK,SAAA8D,GACF,IAAMvH,EAAQuH,EAAI5I,KAAK6I,MAEvB3I,EAXL,CAACW,KAAM,WAAYmB,KAUWX,EAVLmB,WAUY9C,IAEhCQ,EAASe,EAA0B,OAAQvB,OAE9CuF,OAAM,SAACzE,GACJD,EAA0BL,EAAUM,QMvG5CN,EAAS+C,KACV,IAEI,eAACoC,EAAA,EAAD,CAAOjC,UAAW,EAAGgC,UAAW,iBAAhC,UACqB,YAAvBjC,EAAMjC,cACP,qBAAKkE,UAAW,oBAAhB,SACI,cAAC0D,EAAA,EAAD,CAAkBzB,KAAM,GACN7B,MAAO,CAACuD,SAAU,WAAYC,IAAK,MAAOC,KAAM,WAEtE,sBAAK7D,UAAW,kBAAhB,UACI,cAAC2C,GAAD,CAAevI,MAAO2D,EAAM3D,MAAOgH,SAxBrB,SAAC0C,GAAD,OAAuB/F,EAAMgG,mBAAmBD,EAAU/F,EAAMvB,OAyB9E,wBAAQwD,UAAW,eAAgByC,QA7BtB,kBAAM1E,EAAMiG,eAAejG,EAAMvB,KA8BtC+F,SAAiC,YAAvBxE,EAAMjC,aADxB,oBAEA,cAAC2F,GAAD,CAAaM,QAASqB,EAAStH,aAAqC,YAAvBiC,EAAMjC,kBAEnD,oBAAIkE,UAAW,eAAf,SAEQsD,EAAiB/F,KAAI,SAAAhB,GAUjB,OAAO,gCACH,cAAC4E,GAAA,EAAD,CAAUG,QAAS/E,EAAEI,OAAQyE,SANX,SAACc,GACnBnE,EAAMkG,iBAAiB1H,EAAEC,GAAI0F,EAAEC,cAAcb,QAASvD,EAAMvB,KAKNuE,MAAM,UAAUkB,KAAK,UAC3E,sBAAMjC,UAAWzD,EAAEI,OAAS,eAAiB,GAA7C,SACA,cAACgG,GAAD,CAAevI,MAAOmC,EAAEnC,MAAOgH,SAZT,SAAC0C,GACvB,OAAO/F,EAAMmG,uBAAuBJ,EAAU/F,EAAMvB,GAAID,EAAEC,SAa1D,eAACgG,GAAA,EAAD,CAAYC,QANO,kBAAM1E,EAAMoG,WAAW5H,EAAEC,GAAIuB,EAAMvB,KAMjByF,KAAK,QAC9BM,SAAiC,YAAvBxE,EAAMjC,aAD5B,cACyD,cAACsI,GAAA,EAAD,SAN5C7H,EAAEC,SAWnC,qBAAKwD,UAAW,uBAAhB,SACI,qBAAKA,UAAW,eAAhB,SACI,eAACqE,GAAA,EAAD,CAAapG,QAAQ,YAAY8C,MAAM,UAAUuD,aAAW,iCAC/CrC,KAAK,QADlB,UAEI,cAACT,EAAA,EAAD,CAAQT,MAAwB,QAAjBhD,EAAMzB,OAAmB,UAAY,UAAWmG,QA3DrD,kBAAM1E,EAAMwG,aAAa,MAAOxG,EAAMvB,KA2DhD,iBAGA,cAACgF,EAAA,EAAD,CAAQT,MAAwB,WAAjBhD,EAAMzB,OAAsB,UAAY,UAAWmG,QA7DrD,kBAAM1E,EAAMwG,aAAa,SAAUxG,EAAMvB,KA6DtD,oBAIA,cAACgF,EAAA,EAAD,CAAQT,MAAwB,cAAjBhD,EAAMzB,OAAyB,UAAY,UAClDmG,QAjEQ,kBAAM1E,EAAMwG,aAAa,YAAaxG,EAAMvB,KAgE5D,oC,UCWLgI,OAvFf,WAEI,IAAMzH,EAAYsB,aAAmD,SAAAnC,GAAK,OAAIA,EAAMa,aAC9Ed,EAAQoC,aAA8C,SAAAnC,GAAK,OAAIA,EAAMD,SACrEX,EAAa+C,aAAuC,SAAAnC,GAAK,OAAIA,EAAMuB,KAAKnC,cAExER,EAAWqD,cAEjBoF,qBAAU,WACDjI,GAGLR,GR6FG,SAACA,GACJA,EAASI,EAAe,YACxBhB,IACKwF,MAAK,SAAA9E,GACFE,EATL,CAACW,KAAM,iBAAkBsB,UASInC,EAAKA,OAC7BE,EAASI,EAAe,iBAE3B2E,OAAM,SAACzE,GACJD,EAA0BL,EAAUM,WQpG7C,IAGH,IAAM+I,EAAad,uBAAY,SAAC7G,EAAYY,GACxC,IP0IwB9C,EAAoBI,EO1ItCmD,GP0IkBvD,EO1IM8C,EP0Ic1C,EO1IF8B,EP2IvC,SAAC1B,GACJA,EAASe,EAA0B,UAAWvB,IAC9CG,EAAmBH,EAAYI,GAC1BgF,MAAK,SAAC8D,GACH,GAAKA,EAAI5I,KAAKG,SAAS,GAKnBF,EAAmBC,EAAU0I,EAAI5I,UALV,CACvB,IAAMuB,EA/DE,SAACzB,EAAgBJ,GACzC,MAAO,CAACmB,KAAM,cAAef,OAAQA,EAAQJ,WAAYA,GA8D1BmK,CAAa/J,EAAQJ,GACpCQ,EAASqB,GACTrB,EAASe,EAA0B,OAAQvB,QAKlDuF,OAAM,SAAAzE,GACHD,EAA0BL,EAAUM,QOvJ5CN,EAAS+C,KACV,IAEGuF,EAAUC,uBAAY,SAACjJ,EAAegD,GACxC,IAAMS,EPiHiB,SAACvD,EAAoBF,GAChD,OAAO,SAACU,GACJA,EAASe,EAA0B,UAAWvB,IAC9CG,EAAmBH,EAAYF,GAC1BsF,MAAK,SAAA8D,GACF,IAAKA,EAAI5I,KAAKG,SAAS,GAAI,CACvB,IAAMoB,EAvCD,SAACO,EAAmBpC,EAAoBI,GAC7D,MAAO,CAACe,KAAM,WAAYiB,UAAWA,EAAWpC,WAAYA,EAAYI,UAsCzCgK,CAAUtK,EAAOE,EAAYkJ,EAAI5I,KAAKA,KAAK+J,KAAKnI,IAG/D,OAFA1B,EAASqB,QACTrB,EAASe,EAA0B,OAAQvB,IAG3CO,EAAmBC,EAAU0I,EAAI5I,SAGxCiF,OAAM,SAACzE,GACJD,EAA0BL,EAAUM,OOhI9BwJ,CAAgBxH,EAAYhD,GAC1CU,EAAS+C,KACV,IAEGgH,EAAexB,uBAAY,SAAC7G,EAAYG,EAAiBS,GAC3D,IAAMjB,EPgFH,CAACV,KAAM,cAAef,OOhFG8B,EPgFalC,WOhFD8C,EPgFyBN,WOhFjCH,GAChC7B,EAASqB,KACV,IAEG+H,EAAyBb,uBAAY,SAACS,EAAkBgB,EAAoBC,GAC9E,IP8IwBzK,EAAoBI,EAAgBN,EO9ItDyD,GP8IkBvD,EO9IMwK,EP8IcpK,EO9IFqK,EP8IkB3K,EO9IV0J,EP+I/C,SAAChJ,GACJA,EAASe,EAA0B,UAAWvB,IAC9CG,EAAmBH,EAAYI,EAAQN,GAClCsF,MAAK,SAAC8D,GAEH,GADAwB,QAAQC,IAAIzB,EAAI5I,KAAKG,SAAW,gBAC3ByI,EAAI5I,KAAKG,SAAS,GAMnBF,EAAmBC,EAAU0I,EAAI5I,UANV,CACvBoK,QAAQC,IAAI,QACZ,IAAM9I,EAxEC,SAACzB,EAAgBJ,EAAoB2C,GAC5D,MAAO,CAACxB,KAAM,eAAgBf,SAAQuC,YAAW3C,cAuElB4K,CAAYxK,EAAQJ,EAAYF,GAC/CU,EAASqB,GACTrB,EAASe,EAA0B,OAAQvB,QAKlDuF,OAAM,SAAAzE,GACHD,EAA0BL,EAAUM,QO7J5CN,EAAS+C,KACV,IAEG0G,EAAelB,uBAAY,SAAC7H,EAAyBgB,GACvD,IAAML,ERmDH,CACHV,KAAM,yBACNe,GQrDsCA,ERsDtCF,OQtD0Cd,GAC1CV,EAASqB,KACV,IAEGgJ,EAAiB9B,uBAAY,SAAC7G,GAChC,IR8F4BlC,EQ9FtB8K,GR8FsB9K,EQ9FYkC,ER+FrC,SAAC1B,GACJA,EAASe,EAA0B,UAAWvB,IAC9CJ,EAA4BI,GACvBoF,MAAK,SAAC8D,GACEA,EAAI5I,KAAKG,SAAS,GAInBF,EAAmBC,EAAU0I,EAAI5I,OAHjCE,EAnEY,SAACR,GAC7B,MAAO,CAACmB,KAAM,kBAAmBe,GAAIlC,GAkEZ+K,CAAiB/K,IAC1BQ,EAASe,EAA0B,OAAQvB,QAKlDuF,OAAM,SAACzE,GACJD,EAA0BL,EAAUM,QQ1G5CN,EAASsK,KACV,IAEGE,EAAcjC,uBAAY,SAACjJ,GAC7B,IAAMgL,ERuEqB,SAAChL,GAChC,OAAO,SAACU,GACJA,EAASI,EAAe,YACxBhB,EAA4BE,GACvBsF,MAAK,SAAA8D,GACGA,EAAI5I,KAAKG,SAAS,GAInBF,EAAmBC,EAAU0I,EAAI5I,OAHjCE,EA5BT,CAACW,KAAM,eAAgBuB,SA4BSwG,EAAI5I,KAAKA,KAAK+J,OACrC7J,EAASI,EAAe,kBAK/B2E,OAAM,SAACzE,GACJD,EAA0BL,EAAUM,OQpFxBmK,CAAoBnL,GACxCU,EAASsK,KACV,IAEGI,EAA6BnC,uBAAY,SAACS,EAAkBtH,GAC9D,IRsG4BlC,EAAoBF,EQtG1CgL,GRsGsB9K,EQtGYkC,ERsGQpC,EQtGJ0J,ERuGzC,SAAChJ,GACJA,EAASe,EAA0B,UAAWvB,IAC9CJ,EAA4BI,EAAYF,GACnCsF,MAAK,SAAC8D,GACEA,EAAI5I,KAAKG,SAAS,GAInBF,EAAmBC,EAAU0I,EAAI5I,OAHjCE,EAjFiB,SAACR,EAAoBmL,GACtD,MAAO,CACHhK,KAAM,wBACNe,GAAIlC,EACJF,MAAOqL,GA6EcC,CAAsBpL,EAAYF,IAC3CU,EAASe,EAA0B,OAAQvB,QAKlDuF,OAAM,SAACzE,GACJD,EAA0BL,EAAUM,QQlH5CN,EAASsK,KACV,IAEH,OAAI9J,EAIG,sBAAK8E,MAAO,CAACuF,YAAa,MAA1B,UACH,8CACA,cAAClE,GAAD,CAAaM,QAASuD,EAAaxJ,cAAc,IACjD,cAAC8J,GAAA,EAAD,CAAMC,WAAW,EAAMzF,MAAO,CAACC,QAAS,QAAxC,SACKtD,EAAUQ,KAAI,SAACJ,GACZ,IAAMmG,EAAmBrH,EAAMkB,EAAGX,IAClC,OAAO,cAACoJ,GAAA,EAAD,CAAMjB,MAAI,EAAV,SACC,cAACxB,GAAD,CACIe,uBAAwBA,EACxBH,mBAAoByB,EAEpBhJ,GAAIW,EAAGX,GACPpC,MAAO+C,EAAG/C,MACV6B,MAAOqH,EACPa,WAAYA,EACZI,aAAcA,EACdnB,QAASA,EACTa,iBAAkBY,EAClBvI,OAAQa,EAAGb,OACX0H,eAAgBmB,EAChBrJ,aAAcqB,EAAGrB,cAVZqB,EAAGX,KAJGW,EAAGX,YAT3B,cAAC,IAAD,CAAUuD,GAAI,YCvEhB+F,GAAM,WACf,IAAMC,EAAY1H,aAAoD,SAAAnC,GAAK,OAAIA,EAAMsB,IAAI9B,UACnFC,EAAgB0C,aAAuC,SAAAnC,GAAK,OAAIA,EAAMsB,IAAI7B,iBAC1EL,EAAa+C,aAAuC,SAAAnC,GAAK,OAAIA,EAAMuB,KAAKnC,cAExER,EAAWqD,cACjBoF,qBAAU,WACNzI,GV6CG,SAACA,GACJA,EAASI,EAAe,YACxBP,IACK+E,MAAK,SAAA8D,GACGA,EAAI5I,KAAKgF,WAKV9E,EAASI,EAAe,YAJxBJ,EAASS,GAAgB,IACzBT,EAASc,GAAgB,IACzBd,EAASI,EAAe,eAI5BJ,EAASc,GAAgB,OAE5BiE,OAAM,SAACzE,GACJD,EAA0BL,EAAUM,WU1D7C,IAMH,OAAKO,EAYE,sBAAKqE,UAAU,MAAf,UACH,cAACgG,EAAA,EAAD,CAAQrC,SAAS,SAAjB,SACI,eAACsC,EAAA,EAAD,CAAS7F,MAAO,CAAC8F,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,WAA/E,UACI,cAACC,EAAA,EAAD,CAAYpI,QAAQ,KAApB,sBACC3C,EAAa,cAACkG,EAAA,EAAD,CAAQT,MAAM,UAAU0B,QApBnC,WACX3H,GXqBG,SAACA,GACJA,EAASI,EAAe,YACxBP,IACK+E,MAAK,SAAA8D,GACGA,EAAI5I,KAAKgF,YAIV/E,EAAmBC,EAAU0I,EAAI5I,MACjCE,EAASI,EAAe,aAJxBJ,EAASS,GAAgB,IACzBT,EAASI,EAAe,kBAM/B2E,OAAM,SAAAzE,GACHD,EAA0BL,EAAUM,UWftB,sBAA6D,UAGnF,qBAAKgF,MAAO,CAACU,OAAQ,MAAOR,MAAO,QAAnC,SACmB,YAAdyF,GAA2B,cAACO,EAAA,EAAD,CAAgBlG,MAAO,CAACW,MAAO,eAE/D,cAAC7C,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOqI,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,cAAC,GAAD,OACtC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAM,SAAUC,OAAQ,kBAAM,cAAC,GAAD,CAAOnL,WAAYA,OAC9D,cAAC,IAAD,CAAOkL,KAAM,OAAQC,OAAQ,kBAAM,wDACnC,cAAC,IAAD,CAAUC,KAAM,IAAK3G,GAAI,eA1BtB,qBAAKK,MAAO,CACfuD,SAAU,WACVrD,MAAO,OACPQ,OAAQ,OACR6F,WAAY,SACZT,QAAS,OACTC,eAAgB,UANb,SAQH,cAACzC,EAAA,EAAD,CAAkBzB,KAAM,SC9BpC2E,IAASH,OACL,cAAC,IAAD,CAAU/I,MAAOA,EAAjB,SACI,cAAC,IAAD,UACI,cAAC,GAAD,QAEKmJ,SAASC,eAAe,Sf4HnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvH,MAAK,SAAAwH,GACJA,EAAaC,gBAEdtH,OAAM,SAAAzE,GACL4J,QAAQ5J,MAAMA,EAAMgM,c","file":"static/js/main.a77a263f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport {TaskType} from \"../../components/Todolist\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3a123130-7eae-4888-b422-da332a4d5f0c'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n\r\nexport type ResponseTodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseAPI<D> = {\r\n    data: D\r\n    fieldsErrors?: []\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\n\r\nexport const todoListsAPI = {\r\n    GetTodolist: () => instance.get<Array<ResponseTodolistType>>('todo-lists'),\r\n\r\n    CreateTodolist: (title: string) => instance.post<ResponseAPI<{ item: ResponseTodolistType }>>('todo-lists', {title: title}),\r\n\r\n    DeleteTodolist: (todolistId: string) => instance.delete<ResponseAPI<{}>>(`todo-lists/${todolistId}`),\r\n\r\n    UpdateTodolist: (todolistId: string, title: string) => instance.put<ResponseAPI<{}>>(`todo-lists/${todolistId}`, {title: title})\r\n}\r\n\r\n\r\nexport type responseTaskType = {\r\n    addedDate: string\r\n    deadline: null\r\n    description: null\r\n    id: string\r\n    order: number\r\n    priority: number\r\n    startDate: null\r\n    status: number\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype responseGetType<i> = {\r\n    error: any\r\n    items: Array<i>\r\n    totalCount: number\r\n}\r\n\r\n\r\nexport const taskAPI = {\r\n\r\n    GetTask: (todolistId: string) => instance.get<responseGetType<TaskType>>(`/todo-lists/${todolistId}/tasks`),\r\n\r\n    CreateTask: (todolistId: string, title: string) => instance.post<ResponseAPI<{ item: responseTaskType }>>(`/todo-lists/${todolistId}/tasks`, {title: title}),\r\n\r\n    DeleteTask: (todolistId: string, taskId: string) => instance.delete<ResponseAPI<{}>>(`/todo-lists/${todolistId}/tasks/${taskId}`),\r\n\r\n    UpdateTask: (todolistId: string, taskId: string, title: string) => instance.put<ResponseAPI<responseTaskType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, {title: title})\r\n\r\n}\r\n\r\nexport type LoginDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha?: string\r\n}\r\n\r\ntype AuthMeType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    auth: (data: LoginDataType) => instance.post<ResponseAPI<{ userId?: number }>>('/auth/login', data),\r\n    authMe: () => instance.get<ResponseAPI<AuthMeType>>('/auth/me'),\r\n    logout: () => instance.delete<ResponseAPI<{}>>('/auth/login')\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {setAppErrorAC, setAppErrorType, setAppStatusAC, setAppStatusType} from \"../reducer/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseAPI} from \"../requests/apiRequests\";\r\n\r\n\r\nexport const handlerServerError = <T>(dispatch: Dispatch<setAppStatusType | setAppErrorType>, data: ResponseAPI<T>) => {\r\n    if (data.messages[0].length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\nexport const handlerServerNetworkError = (dispatch: Dispatch<setAppStatusType | setAppErrorType>, error: any) => {\r\n    dispatch(setAppErrorAC(error.messages ? error.messages : 'failed loading'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppErrorType, setAppStatusAC, setAppStatusType} from \"./app-reducer\";\r\nimport {authAPI, LoginDataType} from \"../requests/apiRequests\";\r\nimport {handlerServerError, handlerServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN' : {\r\n            return {...state, isLoggedIn: action.value}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | setAppStatusType | setAppErrorType\r\n\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => {\r\n    return {type: 'login/SET-IS-LOGGED-IN', value} as const\r\n}\r\n\r\n\r\nexport const loginTC = (data: LoginDataType) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        authAPI.auth(data)\r\n            .then(rec => {\r\n                if (!rec.data.resultCode) {\r\n                    dispatch(setIsLoggedInAC(true))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handlerServerError(dispatch, rec.data)\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        authAPI.logout()\r\n            .then(res => {\r\n                if (!res.data.resultCode) {\r\n                    dispatch(setIsLoggedInAC(false))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handlerServerError(dispatch, res.data)\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../requests/apiRequests\";\r\nimport {handlerServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\n\r\n\r\nexport type StatusApiRequestType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: \"loading\" as StatusApiRequestType,\r\n    error: '',\r\n    initializeApp: false\r\n\r\n}\r\ntype InitialStateType = {\r\n    status: StatusApiRequestType\r\n    error: string | null\r\n    initializeApp: boolean\r\n}\r\n\r\n\r\nexport type setAppStatusType = {\r\n    type: 'APP/REQUEST-STATUS'\r\n    status: StatusApiRequestType\r\n}\r\n\r\nexport type setAppErrorType = {\r\n    type: 'APP/SET-ERROR'\r\n    error: string | null\r\n}\r\n\r\nexport type initializeAppType = {\r\n    type: 'APP/INITIALIZE-APP'\r\n    initializeApp: boolean\r\n}\r\n\r\ntype ActionType = setAppStatusType | setAppErrorType | initializeAppType\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'APP/REQUEST-STATUS' : {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'APP/SET-ERROR' : {\r\n            return {...state, error: action.error}\r\n        }\r\n        case 'APP/INITIALIZE-APP' : {\r\n            return {...state, initializeApp: action.initializeApp}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: StatusApiRequestType): setAppStatusType => {\r\n    return {type: 'APP/REQUEST-STATUS', status}\r\n}\r\nexport const setAppErrorAC = (error: string | null): setAppErrorType => {\r\n    return {type: 'APP/SET-ERROR', error}\r\n}\r\n\r\nexport const initializeAppAC = (initializeApp: boolean): initializeAppType => {\r\n    return {type: 'APP/INITIALIZE-APP', initializeApp}\r\n}\r\n\r\n\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        authAPI.authMe()\r\n            .then(res => {\r\n                if (!res.data.resultCode) {\r\n                    dispatch(setIsLoggedInAC(true))\r\n                    dispatch(initializeAppAC(true))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n                dispatch(initializeAppAC(true))\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}","import {TodoListType, FilterValuesType} from '../../components/AppWithRedux';\r\nimport {ResponseTodolistType, todoListsAPI} from \"../requests/apiRequests\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC, StatusApiRequestType} from \"./app-reducer\";\r\nimport {handlerServerError, handlerServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string | any\r\n}\r\n\r\nexport type ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodoListActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    todoList: ResponseTodolistType\r\n}\r\n\r\n\r\nexport type SetTodoListsActionType = {\r\n    type: 'SET-TODO-LISTS'\r\n    todoLists: Array<ResponseTodolistType>\r\n}\r\n\r\ntype setTodoListEntityStatusType = {\r\n    type: 'ENTITY-STATUS'\r\n    entityStatus: StatusApiRequestType\r\n    todolistId: string\r\n}\r\n\r\ntype ActionType =\r\n    RemoveTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListActionType\r\n    | AddTodoListActionType\r\n    | SetTodoListsActionType\r\n    | setTodoListEntityStatusType\r\n\r\n\r\nconst initialState: Array<TodoListType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            let todoLists = state.filter((tl) => tl.id !== action.id);\r\n            for (let i = 0; i < state.length; i++) {\r\n                if (state[i].id === action.id) {\r\n                    delete state[i]\r\n                }\r\n            }\r\n            return [...todoLists]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let todoList = state.find((t) => t.id === action.id);\r\n            if (todoList) {\r\n                todoList.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER' : {\r\n            state.find((tl) => {\r\n                if (tl.id === action.id) {\r\n                    tl.filter = action.filter;\r\n                }\r\n            })\r\n            return [...state]\r\n        }\r\n        case 'ADD-TODOLIST' : {\r\n            const newTodoList: TodoListType = {...action.todoList, filter: \"all\", entityStatus: \"idle\"}\r\n            return [newTodoList, ...state ]\r\n        }\r\n\r\n        case 'SET-TODO-LISTS' : {\r\n            return action.todoLists.map((tl) => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n\r\n        case 'ENTITY-STATUS' : {\r\n            state.find((tl) => {\r\n                if (tl.id === action.todolistId) {\r\n                    tl.entityStatus = action.entityStatus\r\n                }\r\n            })\r\n            return [...state]\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setTodoListEntityStatusAC = (entityStatus: StatusApiRequestType, todolistId: string): setTodoListEntityStatusType => {\r\n    return {type: 'ENTITY-STATUS', todolistId, entityStatus}\r\n}\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\n\r\nexport const ChangeTodoListTitleAC = (todolistId: string, newTodolistTitle: string): ChangeTodoListTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE' as const,\r\n        id: todolistId,\r\n        title: newTodolistTitle\r\n    }\r\n}\r\n\r\nexport const ChangeTodoListFilterAC = (todolistId: string, newFilter: FilterValuesType): ChangeTodoListActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER' as const,\r\n        id: todolistId,\r\n        filter: newFilter\r\n    }\r\n}\r\n\r\nexport const AddTodoListAC = (todoList: ResponseTodolistType): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', todoList: todoList}\r\n}\r\n\r\nexport const setTodoListsAC = (todoLists: Array<ResponseTodolistType>): SetTodoListsActionType => {\r\n    return {type: 'SET-TODO-LISTS', todoLists}\r\n}\r\n\r\n\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListsAPI.GetTodolist()\r\n            .then(data => {\r\n                dispatch(setTodoListsAC(data.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchCreateTodoList = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todoListsAPI.CreateTodolist(title)\r\n            .then(res => {\r\n                if (!res.data.messages[0]) {\r\n                    dispatch(AddTodoListAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handlerServerError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchDeleteTodolist = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setTodoListEntityStatusAC('loading', todolistId))\r\n        todoListsAPI.DeleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (!res.data.messages[0]) {\r\n                    dispatch(RemoveTodolistAC(todolistId))\r\n                    dispatch(setTodoListEntityStatusAC('idle', todolistId))\r\n                } else {\r\n                    handlerServerError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchUpdateTodolist = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setTodoListEntityStatusAC('loading', todolistId))\r\n        todoListsAPI.UpdateTodolist(todolistId, title)\r\n            .then((res) => {\r\n                if (!res.data.messages[0]) {\r\n                    dispatch(ChangeTodoListTitleAC(todolistId, title))\r\n                    dispatch(setTodoListEntityStatusAC('idle', todolistId))\r\n                } else {\r\n                    handlerServerError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {TasksStateType} from '../../components/AppWithRedux';\r\nimport {\r\n    AddTodoListActionType,\r\n    RemoveTodoListActionType, setTodoListEntityStatusAC,\r\n    SetTodoListsActionType,\r\n\r\n} from './todolists-reducer'\r\nimport {Dispatch} from \"redux\";\r\nimport {taskAPI} from \"../requests/apiRequests\";\r\nimport {TaskType} from \"../../components/Todolist\";\r\nimport {handlerServerError, handlerServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nexport type RemoveActionCreatorType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\n\r\nexport type AddTaskActionCreatorType = {\r\n    type: 'ADD-TASK'\r\n    titleTask: string\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type TaskStatusActionCreatorType = {\r\n    type: 'TASK-STATUS'\r\n    taskId: string\r\n    todolistId: string\r\n    taskStatus: boolean\r\n}\r\n\r\nexport type ChangeTitleTaskActionCreatorType = {\r\n    type: 'CHANGE-TITLE'\r\n    taskId: string\r\n    todolistId: string\r\n    taskTitle: string\r\n}\r\n\r\n\r\nexport type SetTaskActionCreatorType = {\r\n    type: 'SET-TASK'\r\n    task: Array<TaskType>\r\n    todoListId: string\r\n}\r\n\r\n\r\ntype ActionType =\r\n    RemoveActionCreatorType\r\n    | AddTaskActionCreatorType\r\n    | TaskStatusActionCreatorType\r\n    | ChangeTitleTaskActionCreatorType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n    | SetTaskActionCreatorType\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'REMOVE-TASK': {\r\n\r\n            const copyState = {...state}\r\n            const todolistTasks = copyState[action.todolistId];\r\n            copyState[action.todolistId] = todolistTasks.filter(t => t.id !== action.taskId);\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK' : {\r\n\r\n            const copyState = {...state}\r\n            const todolistTasks = copyState[action.todolistId];\r\n            const NewTask = {id: action.taskId, title: action.titleTask, isDone: false};\r\n            copyState[action.todolistId] = [NewTask, ...todolistTasks];\r\n            return copyState\r\n        }\r\n        case 'TASK-STATUS' : {\r\n\r\n            const copyState = {...state}\r\n            const todolistTasks = copyState[action.todolistId];\r\n            const task = todolistTasks.find((t) => t.id === action.taskId);\r\n            if (task) {\r\n                task.isDone = action.taskStatus;\r\n            }\r\n            copyState[action.todolistId] = [...todolistTasks]\r\n            return copyState\r\n        }\r\n        case 'CHANGE-TITLE' : {\r\n            const copyState = {...state}\r\n            const todoLists = copyState[action.todolistId]\r\n            const todoList = todoLists.find((t) => t.id === action.taskId);\r\n            if (todoList) {\r\n                todoList.title = action.taskTitle;\r\n                copyState[action.todolistId] = [...todoLists]\r\n            }\r\n            return copyState\r\n        }\r\n        case 'ADD-TODOLIST' : {\r\n            const copyState = {...state}\r\n            return {...copyState, [action.todoList.id]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST' : {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return {...copyState}\r\n        }\r\n\r\n        case 'SET-TODO-LISTS' : {\r\n            const copyState = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n\r\n        case 'SET-TASK' : {\r\n            const copyState = {...state}\r\n            copyState[action.todoListId] = action.task\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveActionCreatorType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\n\r\nexport const addTaskAC = (titleTask: string, todolistId: string, taskId: string): AddTaskActionCreatorType => {\r\n    return {type: 'ADD-TASK', titleTask: titleTask, todolistId: todolistId, taskId}\r\n}\r\n\r\nexport const taskStatusAC = (taskId: string, taskStatus: boolean, todolistId: string): TaskStatusActionCreatorType => {\r\n    return {type: 'TASK-STATUS', taskId: taskId, todolistId: todolistId, taskStatus: taskStatus}\r\n}\r\n\r\nexport const taskTitleAC = (taskId: string, todolistId: string, taskTitle: string): ChangeTitleTaskActionCreatorType => {\r\n    return {type: \"CHANGE-TITLE\", taskId, taskTitle, todolistId}\r\n}\r\n\r\nexport const setTaskAC = (task: Array<TaskType>, todoListId: string): SetTaskActionCreatorType => {\r\n    return {type: 'SET-TASK', task, todoListId}\r\n\r\n}\r\n\r\nexport const fetchTaskTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setTodoListEntityStatusAC('loading', todolistId))\r\n        taskAPI.GetTask(todolistId)\r\n            .then(res => {\r\n                const tasks = res.data.items\r\n                const action = setTaskAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setTodoListEntityStatusAC('idle', todolistId))\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchCreateTask = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setTodoListEntityStatusAC('loading', todolistId))\r\n        taskAPI.CreateTask(todolistId, title)\r\n            .then(res => {\r\n                if (!res.data.messages[0]) {\r\n                    const action = addTaskAC(title, todolistId, res.data.data.item.id)\r\n                    dispatch(action)\r\n                    dispatch(setTodoListEntityStatusAC('idle', todolistId))\r\n                    return;\r\n                } else {\r\n                    handlerServerError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchDeleteTask = (todolistId: string, taskId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setTodoListEntityStatusAC('loading', todolistId))\r\n        taskAPI.DeleteTask(todolistId, taskId)\r\n            .then((res) => {\r\n                if (!res.data.messages[0]) {\r\n                    const action = removeTaskAC(taskId, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setTodoListEntityStatusAC('idle', todolistId))\r\n                } else {\r\n                    handlerServerError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchUpdateTask = (todolistId: string, taskId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setTodoListEntityStatusAC('loading', todolistId))\r\n        taskAPI.UpdateTask(todolistId, taskId, title)\r\n            .then((res) => {\r\n                console.log(res.data.messages + ' update task')\r\n                if (!res.data.messages[0]) {\r\n                    console.log('true')\r\n                    const action = taskTitleAC(taskId, todolistId, title)\r\n                    dispatch(action)\r\n                    dispatch(setTodoListEntityStatusAC('idle', todolistId))\r\n                } else {\r\n                    handlerServerError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handlerServerNetworkError(dispatch, error)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../state/reducer/app-reducer\";\r\nimport {AppRootStateType} from \"../state/reducer/store\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const errorMessage = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={!!errorMessage} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {errorMessage}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    TextField,\r\n    Button,\r\n    Paper\r\n} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../state/reducer/auth-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype LoginType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nexport const Login = (props: LoginType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: any = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 2) {\r\n                errors.password = 'Invalid password address';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n\r\n    if (props.isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={'login-container'}>\r\n            <Paper>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <Paper style={{padding: '30px',width:'350px'}}>\r\n                            <h2 style={{textAlign: 'center'}}>Login</h2>\r\n                            <FormLabel>\r\n                                <p>Test login</p>\r\n                                <p>Email: antongaliata@gmail.com</p>\r\n                                <p>Password: 1033393qwe</p>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    id='email'\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                />\r\n                                {<div style={{\r\n                                    height: '30px',\r\n                                    color: formik.errors.email === 'Required' ? 'black' : 'red'\r\n                                }}>{formik.touched.email && formik.errors.email ? (\r\n                                    <div>{formik.errors.email}</div>\r\n                                ) : null}</div>}\r\n                                <TextField\r\n                                    id='password'\r\n                                    type='password'\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps('password')}\r\n                                />\r\n                                {<div style={{\r\n                                    height: '30px',\r\n                                    color: formik.errors.password === 'Required' ? 'black' : 'red'\r\n                                }}>{formik.touched.password && formik.errors.password ? (\r\n                                    <div>{formik.errors.password}</div>\r\n                                ) : null}</div>}\r\n                                <FormControlLabel\r\n                                    label={'Remember me'}\r\n                                    control={<Checkbox onChange={formik.handleChange}\r\n                                                       checked={formik.values.rememberMe}\r\n                                                       name='rememberMe'/>}\r\n                                />\r\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                            </FormGroup>\r\n                        </Paper>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    entityStatus: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormType) {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState(\"\")\r\n\r\n    const addItem = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n        } else {\r\n            setError(\"error\")\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(\"\")\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== '') {\r\n            setError('')\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label=\"Title\"\r\n            helperText={error}\r\n            disabled={props.entityStatus}\r\n        />\r\n        <IconButton onClick={addItem} disabled={props.entityStatus }> <AddBox/> </IconButton>\r\n    </div>\r\n\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EdiTableTitlePropsType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport function EdiTableTitle(props: EdiTableTitlePropsType) {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>()\r\n    let [title, setTitle] = useState<string>('')\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const activeEditMode = () => {\r\n        setTitle(props.title)\r\n        setEditMode(true)\r\n    }\r\n    const switchOfActiveEditMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const titleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value.length < 100) {\r\n            setTitle(e.currentTarget.value)\r\n            setError(false)\r\n        } else {\r\n            setError(true)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField size=\"small\"\r\n                     autoFocus={true}\r\n                     onKeyDown={(e) => {\r\n                         e.key === 'Enter' && switchOfActiveEditMode()\r\n                     }}\r\n                     onChange={titleHandler}\r\n                     onBlur={switchOfActiveEditMode}\r\n                     value={title}\r\n                     color={error ? 'secondary' : 'primary'}\r\n        />\r\n        : <span onDoubleClick={activeEditMode} className={'title'}>{props.title}</span>\r\n}","import React, {ChangeEvent, useCallback, useEffect} from 'react';\r\nimport {FilterValuesType} from './AppWithRedux';\r\nimport '../style/App.css';\r\nimport '../style/todolist.css'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EdiTableTitle} from \"./EdiTableTitle\";\r\nimport {Button, ButtonGroup, Checkbox, CircularProgress, IconButton, Paper} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {fetchTaskTC} from \"../state/reducer/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {StatusApiRequestType} from \"../state/reducer/app-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    entityStatus: StatusApiRequestType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: FilterValuesType, id: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    filter: string\r\n    id: string\r\n    deleteTodoList: (id: string) => void\r\n    changeHandlerTitle: (newTitle: string, id: string) => void\r\n    changeHandlerTaskTitle: (newTitle: string, id: string, idTask: string) => void\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [])\r\n    const buttonDelete = () => props.deleteTodoList(props.id);\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n    const onChangeTitle = (newTitle: string ) => props.changeHandlerTitle(newTitle, props.id);\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone);\r\n    }\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTaskTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    return <Paper elevation={5} className={'paper-todolist'}>\r\n        {props.entityStatus === 'loading' &&\r\n        <div className={'todolist-at-event'}>\r\n            <CircularProgress size={70}\r\n                              style={{position: 'absolute', top: '35%', left: '35%'}}/>\r\n        </div>}\r\n        <div className={'header_todolist'}>\r\n            <EdiTableTitle title={props.title} onChange={onChangeTitle}/>\r\n            <button className={'buttonDelete'} onClick={buttonDelete}\r\n                    disabled={props.entityStatus === 'loading'}>&#10006;</button>\r\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus === 'loading'}/>\r\n        </div>\r\n            <ul className={'wrapperTasks'}>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n                        const onChangeTaskTitle = (newTitle: string) => {\r\n                            return props.changeHandlerTaskTitle(newTitle, props.id, t.id);\r\n                        }\r\n\r\n                        const ChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n                        }\r\n\r\n                        const onClickHandler = () => props.removeTask(t.id, props.id);\r\n                        return <div key={t.id}>\r\n                            <Checkbox checked={t.isDone} onChange={ChangeHandler} color=\"primary\" size=\"small\"/>\r\n                            <span className={t.isDone ? \"task_is_done\" : \"\"}>\r\n                            <EdiTableTitle title={t.title} onChange={onChangeTaskTitle}/>\r\n                        </span>\r\n                            <IconButton onClick={onClickHandler} size=\"small\"\r\n                                        disabled={props.entityStatus === 'loading'}> <Delete/></IconButton>\r\n                        </div>\r\n                    })\r\n                }\r\n            </ul>\r\n        <div className={'wrapper-button-group'}>\r\n            <div className={'button-group'}>\r\n                <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\"\r\n                             size=\"small\">\r\n                    <Button color={props.filter === \"all\" ? \"primary\" : \"inherit\"} onClick={onAllClickHandler}\r\n                    >All</Button>\r\n\r\n                    <Button color={props.filter === \"active\" ? \"primary\" : \"inherit\"} onClick={onActiveClickHandler}\r\n                    >Active\r\n                    </Button>\r\n\r\n                    <Button color={props.filter === \"completed\" ? \"primary\" : \"inherit\"}\r\n                            onClick={onCompletedClickHandler}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {\r\n    ChangeTodoListFilterAC, fetchCreateTodoList, fetchDeleteTodolist, fetchTodoListsTC, fetchUpdateTodolist\r\n} from \"../state/reducer/todolists-reducer\";\r\nimport {\r\n    fetchCreateTask, fetchDeleteTask, fetchUpdateTask,\r\n    taskStatusAC\r\n} from \"../state/reducer/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/reducer/store\";\r\nimport {StatusApiRequestType} from \"../state/reducer/app-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: StatusApiRequestType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n\r\n    const removeTask = useCallback((id: string, todoListId: string) => {\r\n        const thunk = fetchDeleteTask(todoListId, id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        const thunk = fetchCreateTask(todoListId, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todoListId: string) => {\r\n        const action = taskStatusAC(id, isDone, todoListId)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const changeHandlerTaskTitle = useCallback((newTitle: string, idTodoList: string, idTask: string) => {\r\n        const thunk = fetchUpdateTask(idTodoList, idTask, newTitle)\r\n        dispatch(thunk);\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, id: string) => {\r\n        const action = ChangeTodoListFilterAC(id, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodoList = useCallback((id: string) => {\r\n        const actionThunk = fetchDeleteTodolist(id)\r\n        dispatch(actionThunk)\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        const actionThunk = fetchCreateTodoList(title)\r\n        dispatch(actionThunk)\r\n    }, [])\r\n\r\n    const changeHandlerTodoListTitle = useCallback((newTitle: string, id: string) => {\r\n        const actionThunk = fetchUpdateTodolist(id, newTitle)\r\n        dispatch(actionThunk)\r\n    }, [])\r\n\r\n    if(!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <div style={{paddingLeft: '1%'}}>\r\n        <h3>Add Todolist</h3>\r\n        <AddItemForm addItem={addTodoList} entityStatus={false}/>\r\n        <Grid container={true} style={{padding: '20px'}}>\r\n            {todoLists.map((tl) => {\r\n                const tasksForTodolist = tasks[tl.id];\r\n                return <Grid item key={tl.id}>\r\n                        <Todolist\r\n                            changeHandlerTaskTitle={changeHandlerTaskTitle}\r\n                            changeHandlerTitle={changeHandlerTodoListTitle}\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksForTodolist}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={tl.filter}\r\n                            deleteTodoList={removeTodoList}\r\n                            entityStatus={tl.entityStatus}/>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n    </div>\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {ErrorSnackbar} from \"./Snackbar\";\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"./login\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/reducer/store\";\r\nimport {fetchTodoListsTC, StatusApiRequestType} from \"../state/reducer/app-reducer\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {logoutTC} from \"../state/reducer/auth-reducer\";\r\n\r\nexport const App = () => {\r\n    const appStatus = useSelector<AppRootStateType, StatusApiRequestType>(state => state.app.status)\r\n    const initializeApp = useSelector<AppRootStateType, boolean>(state => state.app.initializeApp)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    const logout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!initializeApp) {\r\n        return <div style={{\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: '100%',\r\n            alignItems: \"center\",\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n        }}>\r\n            <CircularProgress size={120}/></div>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n            <Toolbar style={{display: 'flex', justifyContent: 'space-between', background: '#4B4453'}}>\r\n                <Typography variant=\"h4\">Todolist</Typography>\r\n                {isLoggedIn ? <Button color=\"inherit\" onClick={logout}>sign out</Button> : null}\r\n            </Toolbar>\r\n        </AppBar>\r\n        <div style={{height: '4px', width: '100%'}}>\r\n            {appStatus === 'loading' && <LinearProgress style={{color: '#B39CD0'}}/>}\r\n        </div>\r\n        <ErrorSnackbar/>\r\n        <Switch>\r\n            <Route exact path={'/'} render={() => <AppWithRedux/>}/>\r\n            <Route exact path={'/login'} render={() => <Login isLoggedIn={isLoggedIn}/>}/>\r\n            <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n            <Redirect from={'*'} to={'/404'}/>\r\n        </Switch>\r\n    </div>\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/reducer/store\";\r\nimport {App} from \"./components/App\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}